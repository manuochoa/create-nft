{"version":3,"sources":["App.js","build/web3.js","NFT-Marketplace.js","build/NFT.js","index.js"],"names":["require","App","web3","Web3","window","givenProvider","provider","providers","HttpProvider","Moralis","NFTMarket","initialize","serverURL","useState","userAddress","setUserAddress","setBalancesNFT","fileUploaded","setFileUploaded","fileName","setFileName","fileURI","setFileURI","currentUser","User","current","login","a","authenticate","then","user","get","error","console","log","logout","logOut","getNFTBalance","options","chain","address","getNFTs","BscNFT","e","data","target","files","fileToUpload","File","name","saveIPFS","_ipfs","_hash","createNFT","eth","Contract","NftToken","abi","instance","getAccounts","accounts","methods","create","send","from","useEffect","maxW","onClick","align","spacing","direction","justify","p","borderWidth","borderRadius","minH","className","onChange","uploadFile","type","style","display","margin","value","id","isFullWidth","minW","w","src","alt","ReactDOM","render","theme","document","getElementById"],"mappings":"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","file":"static/js/main.b4eff621.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Text,\n  Button,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  HStack,\n  Grid,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nconst Web3 = require('web3');\n// let web3 = await new Web3(Web3.givenProvider);\n// await web3.eth.net.getId().then(console.log);\n\nconst Moralis = require('moralis');\n\nfunction App() {\n  Moralis.initialize('9jTSEy7eKGdH8EBCOvH5zCYM01TxksUQcItcbfQg');\n  Moralis.serverURL = 'https://dzfl3tiplyqt.usemoralis.com:2053/server';\n\n  const [userAddress, setUserAddress] = useState(null);\n  const [balances, setBalances] = useState(null);\n  const [balancesNFT, setBalancesNFT] = useState(null);\n  const [netID, setNetID] = useState(null);\n  let currentUser = Moralis.User.current();\n\n  const login = async () => {\n    try {\n      Moralis.Web3.authenticate().then(function (user) {\n        setUserAddress(user.get('ethAddress'));\n        console.log(user);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      Moralis.User.logOut().then(() => {\n        currentUser = Moralis.User.current();\n        setUserAddress(null);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getBalances = async () => {\n    if (userAddress) {\n      try {\n        const options = { chain: 'bsc testnet', address: userAddress };\n        const tokens = await Moralis.Web3.getAllERC20(options);\n        setBalances(tokens);\n        console.log(balances);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const getNFT = async () => {\n    try {\n      const options = { chain: 'bsc testnet', address: userAddress };\n      const BscNFT = await Moralis.Web3.getNFTs(options);\n      setBalancesNFT(BscNFT);\n      console.log(BscNFT);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const showCurrentUser = () => {\n    if (currentUser) {\n      console.log(currentUser.get('ethAddress'));\n    }\n  };\n\n  useEffect(() => {\n    if (currentUser) {\n      setUserAddress(currentUser.get('ethAddress'));\n    }\n  }, []);\n\n  return (\n    <Box textAlign=\"center\" fontSize=\"xl\">\n      <Grid minH=\"100vh\" p={3}>\n        <HStack>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          {!currentUser ? (\n            <Button justifySelf=\"flex-end\" onClick={login}>\n              Login\n            </Button>\n          ) : (\n            <Button justifySelf=\"flex-end\" onClick={logout}>\n              Logout\n            </Button>\n          )}\n          <Button onClick={getBalances}>Balances</Button>\n          <Button onClick={getNFT}>NFT Balances</Button>\n          <Button onClick={showCurrentUser}> Current User</Button>\n        </HStack>\n        <HStack spacing={8}>\n          <Text>Wallet Balances</Text>\n          {netID && <Text>{netID} </Text>}\n\n          {balances &&\n            balances.map(({ balance, decimals, name, symbol }) => {\n              const decimales = Number(`1e${decimals}`);\n              const amount = (balance / decimales).toFixed(2);\n              return (\n                <Stat>\n                  <StatLabel>{symbol}</StatLabel>\n                  <StatNumber> {amount} </StatNumber>\n                  <StatHelpText>{name}</StatHelpText>\n                </Stat>\n              );\n            })}\n        </HStack>\n      </Grid>\n    </Box>\n  );\n}\n\nexport default App;\n","const Web3 = require(\"web3\");\n\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.web3 !== \"undefined\") {\n    //we are in the browser and metamask is running\n    web3 = new Web3 (Web3.givenProvider);\n}else {\n    //we are on the server or the user don't have metamask\n    const provider = new Web3.providers.HttpProvider(\n        \"https://data-seed-prebsc-1-s1.binance.org:8545\"\n    );\n    web3 = new Web3(provider);\n}\n\nexport default web3;\n","import React, { useState, useEffect } from 'react';\r\nimport NftToken from './build/NFT';\r\nimport {\r\n  Container,\r\n  Text,\r\n  Flex,\r\n  Input,\r\n  Button,\r\n  Divider,\r\n  Box,\r\n  Stack,\r\n  Image,\r\n  Center,\r\n  VStack,\r\n} from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\r\nimport web3 from './build/web3';\r\n\r\nconst Moralis = require('moralis');\r\n\r\nfunction NFTMarket() {\r\n  // Initialize Moralis for web3 tools\r\n  Moralis.initialize('9jTSEy7eKGdH8EBCOvH5zCYM01TxksUQcItcbfQg');\r\n  Moralis.serverURL = 'https://dzfl3tiplyqt.usemoralis.com:2053/server';\r\n\r\n  // Set Variables\r\n  const [userAddress, setUserAddress] = useState(null);\r\n  const [balances, setBalances] = useState(null);\r\n  const [balancesNFT, setBalancesNFT] = useState(null);\r\n  const [netID, setNetID] = useState(null);\r\n  const [fileUploaded, setFileUploaded] = useState(null);\r\n  const [fileName, setFileName] = useState('');\r\n  const [fileURI, setFileURI] = useState(null);\r\n  let currentUser = Moralis.User.current();\r\n\r\n  // Login with Moralis Function\r\n  const login = async () => {\r\n    try {\r\n      Moralis.Web3.authenticate().then(function (user) {\r\n        setUserAddress(user.get('ethAddress'));\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Logout from Moralis\r\n  const logout = async () => {\r\n    try {\r\n      Moralis.User.logOut().then(() => {\r\n        currentUser = Moralis.User.current();\r\n        setUserAddress(null);\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Get BEP-20 balances of userAddress\r\n  const getBalances = async () => {\r\n    if (userAddress) {\r\n      try {\r\n        const options = { chain: 'bsc testnet', address: userAddress };\r\n        const tokens = await Moralis.Web3.getAllERC20(options);\r\n        setBalances(tokens);\r\n        console.log(balances);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Get NFT Balances of userAddress\r\n  const getNFTBalance = async () => {\r\n    try {\r\n      const options = { chain: 'bsc testnet', address: userAddress };\r\n      const BscNFT = await Moralis.Web3.getNFTs(options);\r\n      setBalancesNFT(BscNFT);\r\n      console.log(BscNFT);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  //Upload File to IPFS\r\n  async function uploadFile(e) {\r\n    try {\r\n      const data = e.target.files[0];\r\n      const fileToUpload = new Moralis.File(data.name, data);\r\n      await fileToUpload.saveIPFS();\r\n      setFileUploaded(fileToUpload._ipfs);\r\n      setFileURI(fileToUpload._hash);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  // Send transaction to contract\r\n  const createNFT = async () => {\r\n    try {\r\n      let instance = await NftToken();\r\n      const accounts = await web3.eth.getAccounts();\r\n      const newNFT = await instance.methods\r\n        .create(fileURI, fileName)\r\n        .send({ from: accounts[0] });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Get current user in case of page reload - don't need to login every time\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      setUserAddress(currentUser.get('ethAddress'));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxW=\"container.xl\">\r\n      {/* Navbar with login and getNFT buttons */}\r\n\r\n      <Flex>\r\n        <Button onClick={getNFTBalance}>My NFT's</Button>\r\n        <Divider />\r\n        {userAddress ? (\r\n          <Button onClick={logout} align=\"left\">\r\n            Logout\r\n          </Button>\r\n        ) : (\r\n          <Button onClick={login} align=\"left\">\r\n            Login\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n\r\n      {/* Create NFT form */}\r\n\r\n      <Stack spacing={8} direction=\"row\" justify=\"center\">\r\n        <Box maxW=\"md\" p={4}>\r\n          <Text>Upload File</Text>\r\n          <VStack p={1} borderWidth=\"2px\" borderRadius=\"lg\" minH=\"100px\">\r\n            <label className=\"label-upload\">\r\n              Upload\r\n              <input\r\n                onChange={e => uploadFile(e)}\r\n                type=\"file\"\r\n                style={{ display: 'none' }}\r\n              />\r\n            </label>\r\n\r\n            <Divider margin={3} />\r\n            <br />\r\n            <Text> PNG, GIF, WEBP, MP4 or MP3. Max 30mb</Text>\r\n          </VStack>\r\n\r\n          <Divider margin={3} />\r\n\r\n          <Text> Name </Text>\r\n          <Input\r\n            onChange={e => setFileName(e.target.value)}\r\n            value={fileName}\r\n            type=\"text\"\r\n            id=\"name\"\r\n          />\r\n\r\n          <Divider margin={3} />\r\n\r\n          <Text> Description </Text>\r\n          <Input type=\"text\" name=\"description\" id=\"description\" />\r\n\r\n          <Divider margin={3} />\r\n\r\n          <Text> Properties </Text>\r\n          <Input type=\"text\" name=\"properties\" id=\"properties\" />\r\n\r\n          <Divider margin={3} />\r\n\r\n          <Button isFullWidth=\"true\" onClick={createNFT}>\r\n            Create!\r\n          </Button>\r\n        </Box>\r\n\r\n        {/* NFT Preview */}\r\n\r\n        <VStack>\r\n          <Text> Preview </Text>\r\n          <Center\r\n            maxW=\"sm\"\r\n            minW=\"sm\"\r\n            minH=\"sm\"\r\n            w=\"100%\"\r\n            p={1}\r\n            borderWidth=\"2px\"\r\n            borderRadius=\"lg\"\r\n          >\r\n            {fileUploaded ? (\r\n              <Image src={fileUploaded} alt={`${fileUploaded}`} />\r\n            ) : (\r\n              <Text>Select a file to upload</Text>\r\n            )}\r\n          </Center>\r\n        </VStack>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NFTMarket;\r\n","import web3 from './web3';\r\nimport NftToken from './NftToken.json';\r\n\r\nexport default () => {\r\n  return new web3.eth.Contract(\r\n    NftToken.abi,\r\n    '0xE4BFBCB18788aD353077f877822460348F606F1E'\r\n  );\r\n};\r\n","import { ChakraProvider, theme, ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport NFT from './NFT-Marketplace';\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <NFT />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}